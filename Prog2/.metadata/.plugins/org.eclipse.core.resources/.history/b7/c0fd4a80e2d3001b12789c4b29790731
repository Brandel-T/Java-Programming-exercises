package Aufgabe1_one_ABNAHME;

import java.util.Stack;

public class BinTree
{
	protected Node root = null; 
	
	protected class Node 
	{
		Element value;
		Node left, right;
		
		Node(Element value, Node left, Node right) {
			this.value = value;
			this.left = left;
			this.right = right;
		}

		public String toString() {
			return "Node [value=" + value + ", left=" + left + ", right=" + right + "]";
		}		 
	}
	
	public boolean isEmpty() {
		return root == null;
	}
	
	public void inorder( Node n )
	{
		if (n == null) {
			return;
		} else {
			inorder(n.left);
			System.out.println( n.toString() );
			inorder(n.right);
		}		
	}
	
//	public void inorder(Node node)
//	{
//		if (node == null) {
//			return;
//		} else {
//			Stack<Node> stack = new Stack<Node>();
//			BinTree.Node h = node;
//			
//			while (h != null || !stack.isEmpty()) 
//			{
//				if ( h!=null ) {
//					stack.push(h);
//					h = h.left;
//					
//				} else {
//					h = stack.pop();
//					System.out.print(h.toString()); 
//					h = h.right;
//				}
//			}
//		}
//	}
	
//	public boolean insert( Element e ) 
//	{
//		Node node = new Node( e, null, null );
//		
//		if ( root == null ) {
//			this.root = node;
//			return true;
//		} 
//		else if (e.compareTo(root.value) == 0) {
//			return false;
//		}
//		else {
//			Node h = root;
//			if (e.compareTo(h.value) < 0 ) 
//			{
//				if ( h.left == null ) {
//					h.left = node;
//				} else {
//					return insert(e, h.left);
//				}				
//			} 
//			else if (e.compareTo(h.value) > 0) {
//				if ( h.right == null ) {
//					h.right = node;
//				} else {
//					return insert(e, h.right);
//				}	
//			} 
//		}
//		return false;
//	}
//	
//	public boolean insert(Element el, Node root) 
//	{
//		this.root = root;
//		
//		if ( this.root.value.compareTo(el) == 0)
//			return false;
//		else {
//			return insert(el);
//		}
//		 
//	}
	
	public boolean insert(Element e) {
		if (e == null)
			return false;
		else
			return insert(e , this.root);
	}
	
	public boolean insert(Element e, Node tmpRoot)
	{
		if (tmpRoot == null) {
			tmpRoot = new Node(e, null, null);
			return true;
		}		
		else if (tmpRoot != null && tmpRoot.value.compareTo(e) == 0)
			return false;
		else if (tmpRoot.value.compareTo(e) < 0)
			insert(e, tmpRoot.right);
		else if (tmpRoot.value.compareTo(e) > 0)
			insert(e, tmpRoot.left);
		
		return false;
	}

	public static void main(String[] args) {
		
		BinTree bt = new BinTree();
//		BinTree.Node node = bt.new Node(new Element(4), null, null);
//		bt.root = bt.new Node(new Element(4), null, null);
		System.out.println( bt.isEmpty() );
		System.out.println( bt.insert( null ) ); 
		System.out.println( bt.insert(new Element(4)) ); 
		System.out.println( bt.insert(new Element(2)) ); 
		System.out.println( bt.insert(new Element(6)) ); 
		System.out.println( bt.insert(new Element(8)) );  
		System.out.println( bt.insert(new Element(9)) ); 
		System.out.println( bt.insert(new Element(7)) ); 
		System.out.println( bt.insert(new Element(5)) ); 
		System.out.println( bt.insert(new Element(3)) ); 
		System.out.println( bt.insert(new Element(1)) );  
		
		System.out.println( "bt.root.toString()  :  " +  bt.root );
		bt.inorder(bt.root);
		
	}

}
